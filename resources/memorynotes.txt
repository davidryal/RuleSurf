issues with rulesurf

.md files do'nt work, use globalrules plus .windsurf rules per project/workspace with prompt, task, ongoing  dont forgets about error loops, dep issues, etc. 

## Unexpected Limitations

--Use web searches way mor than you think you should. use up to 5 searches per major issue.

2nd opinions etc = "Council" "council2, councel3"
--Council on project lessons at project end -> add to future rules, keep as lessons.md file

btw=aside
councel
utd == up to date pkgs installed



use internal memories for extremeley technical learnings that you will need to avoid making the same mistakes again. version conflicts, major aha moments at the end of long loops, etc. --major dependency versions in internal memory at working versions

use windsurf rules for task maintenance, prompt/requirements alignment, tech stack requirements. updates to a ScratchPad.md which the user copies to @.windsurfrules after major changes. the contents of the new file should always start with the current contents of @.windsurfrules and be edited with what you've accompilshed or learned since last edits

global rules for universal rules, shorthand commands, universal project dev cycle structure 

Based on our interactions, here are some potential evolutions I think could help (CL: 85%):

Context Depth Tracking
Add a way to track how "deep" we are in a particular context
Maybe something like /depth to show current context stack
Help prevent context switching when deep in a problem
Error Pattern Memory
Expand circles to maintain a history of attempted solutions
Track which approaches failed and why
Prevent repeating failed strategies (like we almost did with the native auth approach)
Solution Confidence Metrics
Beyond just CL%, track what factors led to success
Record patterns of successful fixes vs failed attempts
Maybe a /success_pattern command to analyze what worked
Dependency Awareness
Better tracking of package/dependency relationships
Record version conflicts and their resolutions
Maybe a /dep_check command for dependency-related issues
Cross-Session Learning
Improve how we carry forward learnings from previous sessions
Maybe a /session_summary command to quickly recap key learnings
Help prevent rediscovering the same solutions
Would any of these directions be particularly valuable to you? I'm especially interested in how we could better maintain context across long debugging sessions like this auth module issue.